diff --git a/drools-compiler/src/main/java/org/drools/compiler/builder/InternalKnowledgeBuilder.java b/drools-compiler/src/main/java/org/drools/compiler/builder/InternalKnowledgeBuilder.java
index 0c10675c584..9e705ac6252 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/builder/InternalKnowledgeBuilder.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/builder/InternalKnowledgeBuilder.java
@@ -19,8 +19,10 @@
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
+import java.util.function.Supplier;
 
 import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;
+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;
 import org.drools.compiler.compiler.PackageBuilderErrors;
 import org.drools.compiler.compiler.PackageBuilderResults;
 import org.drools.compiler.compiler.PackageRegistry;
@@ -90,9 +92,20 @@ public boolean isModified() {
     class Empty implements InternalKnowledgeBuilder {
 
         private final ClassLoader rootClassLoader;
+        private final Supplier<KnowledgeBuilderImpl> lazyBuilder;
 
-        public Empty( ClassLoader rootClassLoader ) {
+        private KnowledgeBuilderImpl knowledgeBuilder;
+
+        public Empty( ClassLoader rootClassLoader, Supplier<KnowledgeBuilderImpl> lazyBuilder ) {
             this.rootClassLoader = rootClassLoader;
+            this.lazyBuilder = lazyBuilder;
+        }
+
+        private synchronized KnowledgeBuilderImpl getKnowledgeBuilder() {
+            if (knowledgeBuilder == null) {
+                knowledgeBuilder = lazyBuilder.get();
+            }
+            return knowledgeBuilder;
         }
 
         @Override
@@ -136,82 +149,82 @@ public void rewireAllClassObjectTypes() {
 
         @Override
         public void add( Resource resource, ResourceType type ) {
-            throw new UnsupportedOperationException();
+            getKnowledgeBuilder().add(resource, type);
         }
 
         @Override
         public void add( Resource resource, ResourceType type, ResourceConfiguration configuration ) {
-            throw new UnsupportedOperationException();
+            getKnowledgeBuilder().add(resource, type, configuration);
         }
 
         @Override
         public KieBase newKieBase() {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().newKieBase();
         }
 
         @Override
         public void undo() {
-            throw new UnsupportedOperationException();
+            getKnowledgeBuilder().undo();
         }
 
         @Override
         public CompositeKnowledgeBuilder batch() {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().batch();
         }
 
         @Override
         public <T extends ResourceTypePackage<?>> T computeIfAbsent( ResourceType resourceType, String namespace, Function<? super ResourceType, T> mappingFunction ) {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().computeIfAbsent( resourceType, namespace, mappingFunction );
         }
 
         @Override
         public void reportError( KnowledgeBuilderError error ) {
-            throw new UnsupportedOperationException();
+            getKnowledgeBuilder().reportError( error );
         }
 
         @Override
         public ResourceRemovalResult removeObjectsGeneratedFromResource( Resource resource ) {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().removeObjectsGeneratedFromResource( resource );
         }
 
         @Override
         public void addPackage( PackageDescr packageDescr ) {
-            throw new UnsupportedOperationException();
+            getKnowledgeBuilder().addPackage( packageDescr );
         }
 
         @Override
         public InternalKnowledgePackage getPackage( String name ) {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().getPackage( name );
         }
 
         @Override
         public KnowledgeBuilderConfigurationImpl getBuilderConfiguration() {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().getBuilderConfiguration();
         }
 
         @Override
         public TypeDeclaration getAndRegisterTypeDeclaration( Class<?> cls, String name ) {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().getAndRegisterTypeDeclaration(cls, name);
         }
 
         @Override
         public TypeDeclaration getTypeDeclaration( Class<?> typeClass ) {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().getTypeDeclaration(typeClass);
         }
 
         @Override
         public List<PackageDescr> getPackageDescrs( String namespace ) {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().getPackageDescrs(namespace);
         }
 
         @Override
         public PackageRegistry getPackageRegistry( String packageName ) {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().getPackageRegistry(packageName);
         }
 
         @Override
         public InternalKnowledgeBase getKnowledgeBase() {
-            throw new UnsupportedOperationException();
+            return getKnowledgeBuilder().getKnowledgeBase();
         }
     }
 }
diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieProject.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieProject.java
index 475b91cbf36..333b01f0988 100644
--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieProject.java
+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/AbstractKieProject.java
@@ -252,16 +252,14 @@ public KnowledgeBuilder buildKnowledgePackages( KieBaseModelImpl kBaseModel, Res
                 log.warn( "No files found for KieBase " + kBaseModel.getName() +
                                   (kModule instanceof FileKieModule ? ", searching folder " + kModule.getFile() : ""));
             }
-            kbuilder = new InternalKnowledgeBuilder.Empty(getClassLoader());
+            kbuilder = new InternalKnowledgeBuilder.Empty( getClassLoader(), () -> provideKnowledgeBuilder( kBaseModel, kModule ) );
 
         } else {
-            kbuilder = createKnowledgeBuilder( kBaseModel, kModule );
+            kbuilder = provideKnowledgeBuilder( kBaseModel, kModule );
             if ( kbuilder == null ) {
                 return null;
             }
 
-            (( KnowledgeBuilderImpl ) kbuilder).setReleaseId( getGAV() );
-
             CompositeKnowledgeBuilder ckbuilder = kbuilder.batch();
 
             for (Asset asset : assets) {
@@ -292,6 +290,14 @@ public KnowledgeBuilder buildKnowledgePackages( KieBaseModelImpl kBaseModel, Res
         return kbuilder;
     }
 
+    public KnowledgeBuilderImpl provideKnowledgeBuilder( KieBaseModelImpl kBaseModel, InternalKieModule kModule ) {
+        KnowledgeBuilderImpl kbuilder = (KnowledgeBuilderImpl) createKnowledgeBuilder( kBaseModel, kModule );
+        if ( kbuilder != null ) {
+            kbuilder.setReleaseId( getGAV() );
+        }
+        return kbuilder;
+    }
+
     private boolean useFolders( KieBaseModelImpl kBaseModel ) {
         String modelProp = kBaseModel.getKModule().getConfigurationProperty( GroupDRLsInKieBasesByFolderOption.PROPERTY_NAME );
         if (modelProp == null) {
diff --git a/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/incrementalcompilation/IncrementalCompilationTest.java b/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/incrementalcompilation/IncrementalCompilationTest.java
index f43022d93f6..87335004c12 100644
--- a/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/incrementalcompilation/IncrementalCompilationTest.java
+++ b/drools-test-coverage/test-compiler-integration/src/test/java/org/drools/compiler/integrationtests/incrementalcompilation/IncrementalCompilationTest.java
@@ -4570,4 +4570,30 @@ private void buildDTableProject( KieServices ks, KieResources kr, ReleaseId rele
             ks.newKieBuilder( kfs ).buildAll(DrlProject.class);
         }
     }
+
+    @Test
+    public void testIncrementalCompilationFromEmptyProject() {
+        // DROOLS-5547
+        final String drl1 =
+                "rule \"test1\" when then end\n";
+
+        final String drl2 =
+                "rule \"test2\" extends \"test1\" when then end\n" +
+                        "rule \"test3\" extends \"test1\" when then end\n";
+
+        final KieServices ks = KieServices.Factory.get();
+
+        final KieFileSystem kfs = ks.newKieFileSystem();
+        final KieBuilder kieBuilder = ks.newKieBuilder(kfs).buildAll(DrlProject.class);
+
+        assertEquals(0, kieBuilder.getResults().getMessages(org.kie.api.builder.Message.Level.ERROR).size());
+
+        kfs.write("src/main/resources/r1.drl", drl1);
+        final IncrementalResults addResults1 = ((InternalKieBuilder) kieBuilder).createFileSet("src/main/resources/r1.drl").build();
+        assertEquals(0, addResults1.getAddedMessages().size());
+
+        kfs.write("src/main/resources/r2.drl", drl2);
+        final IncrementalResults addResults2 = ((InternalKieBuilder) kieBuilder).createFileSet("src/main/resources/r2.drl").build();
+        assertEquals(0, addResults2.getAddedMessages().size());
+    }
 }